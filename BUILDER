# FOR MY USE ONLY
cros-317118

# COMPILER OPTIMIZATIONS
-O3 -march=armv8-a+crc -mtune=cortex-a72 -mfpu=neon-fp-armv8 -mfloat-abi=hard -Wno-error
-O3 -march=armv8-a+crc -mtune=cortex-a72 -mfpu=neon-fp-armv8 -mfloat-abi=hard -Wno-error
-O3 -march=armv8-a+crc -mtune=cortex-a72 -mfpu=neon-fp-armv8 -mfloat-abi=hard -Wno-error
-Wl,-O3 -Wl,--lto-O3

# FILES TO MODIFY FOR COMPILER OPTIMIZATIONS
third_party/portage-stable/profiles/arch/arm64/make.defaults
chromiumos-overlay/profiles/arch/arm64/make.defaults
chromiumos-overlay/profiles/default/linux/make.defaults
chromiumos-overlay/profiles/targets/chromeos/make.defaults
chromiumos-overlay/profiles/targets/sdk/make.defaults
chromiumos-overlay/chromeos/config/make.conf.common
chromiumos-overlay/chromeos/config/make.conf.generic-target

# CHROMEOS-CHROME EBUILD MODIFICATIONS
widevine
# -Official

libassistant

		"is_official_build=true"
		"enable_stripping=true"
		"dcheck_always_on=false"
		"exclude_unwind_tables=true"
		"enable_iterator_debugging=false"
		"disable_fieldtrial_testing_config=true"
		"enable_resource_allowlist_generation=false"
		"enable_profiling=false"
		"is_component_build=false"
		"symbol_level=0"
		"optimize_webui=true"
		"enable_webui_tab_strip=true"
		"use_lld=true"
		"use_glib=false"
		"v8_symbol_level=0"
		"v8_enable_fast_torque=true"
		"blink_symbol_level=0"
		"enable_precompiled_headers=false"
		"media_use_ffmpeg=true"
		"media_use_libvpx=true"
		"enable_hls_sample_aes=true"
		"enable_hls_demuxer=true"
		"enable_ink=false"
		"enable_discovery=true"
		"enable_cros_media_app=false"
		"clang_use_chrome_plugins=false"
		"enable_ffmpeg_video_decoders=true"
		"is_component_ffmpeg=false"
		"use_webaudio_ffmpeg=false"
		"use_webaudio_pffft=true"
		"enable_widevine=true"
		"bundle_widevine_cdm=true"
		"ignore_missing_widevine_signing_cert=true"
		"enable_media_drm_storage=true"
		"enable_hangout_services_extension=true"
		"rtc_use_h264=true"
		"rtc_include_ilbc=true"
		"rtc_build_examples=false"
		"rtc_use_pipewire=false"
		"enable_vr=true"
		"use_vr_assets_component=true"
		"enable_platform_hevc=true"
		"enable_hevc_parser_and_hw_decoder=true"
		"enable_platform_ac3_eac3_audio=true"
		"enable_platform_dolby_vision=true"
		"enable_platform_mpeg_h_audio=true"
		"enable_platform_dts_audio=true"
		"enable_mse_mpeg2ts_stream_parser=true"
		"use_thin_lto=true"
		"thin_lto_enable_optimizations=true"

# WIDEVINE PATCH

under if [[ -f "${GAPI_CONFIG_FILE}" ]]; then
			add_api_keys "${GAPI_CONFIG_FILE}"
		fi
	fi

	if [[ "${CHROME_ORIGIN}" == "LOCAL_SOURCE" ]]; then
    use widevine && patch_widevine
	fi


under "google_default_client_secret=${client_secret}"
	)
}

patch_widevine() {
  info "patching for widevine..."
  local target_dir="${CHROME_ROOT}/src/third_party/widevine/cdm/chromeos/x64"
  local bin_file="${target_dir}/libwidevinecdm.so"
  if [ ! -f ${bin_file} ]; then
    mkdir -p $target_dir || true
    cp ${FILESDIR}/widevine/widevine_cdm_version.h $target_dir || die "Could not copy file to $target_dir"
    cp ${FILESDIR}/widevine/manifest.json $target_dir || die "Could not copy file to $target_dir"
    cp ${FILESDIR}/widevine/libwidevinecdm.so $target_dir || die "Could not copy file to $bin_file"
  fi
}
